// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OpticalFlow.proto

#include "OpticalFlow.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace sensor_msgs {
namespace msgs {
class OpticalFlowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpticalFlow> _instance;
} _OpticalFlow_default_instance_;
}  // namespace msgs
}  // namespace sensor_msgs
static void InitDefaultsscc_info_OpticalFlow_OpticalFlow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensor_msgs::msgs::_OpticalFlow_default_instance_;
    new (ptr) ::sensor_msgs::msgs::OpticalFlow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_msgs::msgs::OpticalFlow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpticalFlow_OpticalFlow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpticalFlow_OpticalFlow_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_OpticalFlow_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_OpticalFlow_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_OpticalFlow_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_OpticalFlow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, time_usec_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, integration_time_us_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, integrated_x_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, integrated_y_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, integrated_xgyro_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, integrated_ygyro_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, integrated_zgyro_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, temperature_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, quality_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, time_delta_distance_us_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, distance_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::sensor_msgs::msgs::OpticalFlow)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensor_msgs::msgs::_OpticalFlow_default_instance_),
};

const char descriptor_table_protodef_OpticalFlow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021OpticalFlow.proto\022\020sensor_msgs.msgs\"\242\002"
  "\n\013OpticalFlow\022\021\n\ttime_usec\030\001 \002(\003\022\021\n\tsens"
  "or_id\030\002 \002(\005\022\033\n\023integration_time_us\030\003 \002(\005"
  "\022\024\n\014integrated_x\030\004 \002(\002\022\024\n\014integrated_y\030\005"
  " \002(\002\022\030\n\020integrated_xgyro\030\006 \002(\002\022\030\n\020integr"
  "ated_ygyro\030\007 \002(\002\022\030\n\020integrated_zgyro\030\010 \002"
  "(\002\022\023\n\013temperature\030\t \002(\002\022\017\n\007quality\030\n \002(\005"
  "\022\036\n\026time_delta_distance_us\030\013 \002(\005\022\020\n\010dist"
  "ance\030\014 \002(\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_OpticalFlow_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_OpticalFlow_2eproto_sccs[1] = {
  &scc_info_OpticalFlow_OpticalFlow_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_OpticalFlow_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OpticalFlow_2eproto = {
  false, false, descriptor_table_protodef_OpticalFlow_2eproto, "OpticalFlow.proto", 330,
  &descriptor_table_OpticalFlow_2eproto_once, descriptor_table_OpticalFlow_2eproto_sccs, descriptor_table_OpticalFlow_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_OpticalFlow_2eproto::offsets,
  file_level_metadata_OpticalFlow_2eproto, 1, file_level_enum_descriptors_OpticalFlow_2eproto, file_level_service_descriptors_OpticalFlow_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_OpticalFlow_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_OpticalFlow_2eproto)), true);
namespace sensor_msgs {
namespace msgs {

// ===================================================================

void OpticalFlow::InitAsDefaultInstance() {
}
class OpticalFlow::_Internal {
 public:
  using HasBits = decltype(std::declval<OpticalFlow>()._has_bits_);
  static void set_has_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_integration_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_integrated_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_integrated_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_integrated_xgyro(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_integrated_ygyro(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_integrated_zgyro(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_time_delta_distance_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000fff) ^ 0x00000fff) != 0;
  }
};

OpticalFlow::OpticalFlow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensor_msgs.msgs.OpticalFlow)
}
OpticalFlow::OpticalFlow(const OpticalFlow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_usec_, &from.time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&time_usec_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.msgs.OpticalFlow)
}

void OpticalFlow::SharedCtor() {
  ::memset(&time_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&time_usec_)) + sizeof(distance_));
}

OpticalFlow::~OpticalFlow() {
  // @@protoc_insertion_point(destructor:sensor_msgs.msgs.OpticalFlow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpticalFlow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OpticalFlow::ArenaDtor(void* object) {
  OpticalFlow* _this = reinterpret_cast< OpticalFlow* >(object);
  (void)_this;
}
void OpticalFlow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpticalFlow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpticalFlow& OpticalFlow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpticalFlow_OpticalFlow_2eproto.base);
  return *internal_default_instance();
}


void OpticalFlow::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.msgs.OpticalFlow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&time_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&integrated_zgyro_) -
        reinterpret_cast<char*>(&time_usec_)) + sizeof(integrated_zgyro_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&temperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&temperature_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpticalFlow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_usec(&has_bits);
          time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 sensor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sensor_id(&has_bits);
          sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 integration_time_us = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_integration_time_us(&has_bits);
          integration_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float integrated_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_integrated_x(&has_bits);
          integrated_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float integrated_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_integrated_y(&has_bits);
          integrated_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float integrated_xgyro = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_integrated_xgyro(&has_bits);
          integrated_xgyro_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float integrated_ygyro = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_integrated_ygyro(&has_bits);
          integrated_ygyro_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float integrated_zgyro = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_integrated_zgyro(&has_bits);
          integrated_zgyro_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float temperature = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 quality = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 time_delta_distance_us = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_time_delta_distance_us(&has_bits);
          time_delta_distance_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float distance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpticalFlow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.msgs.OpticalFlow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time_usec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time_usec(), target);
  }

  // required int32 sensor_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sensor_id(), target);
  }

  // required int32 integration_time_us = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_integration_time_us(), target);
  }

  // required float integrated_x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_integrated_x(), target);
  }

  // required float integrated_y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_integrated_y(), target);
  }

  // required float integrated_xgyro = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_integrated_xgyro(), target);
  }

  // required float integrated_ygyro = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_integrated_ygyro(), target);
  }

  // required float integrated_zgyro = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_integrated_zgyro(), target);
  }

  // required float temperature = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_temperature(), target);
  }

  // required int32 quality = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_quality(), target);
  }

  // required int32 time_delta_distance_us = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_time_delta_distance_us(), target);
  }

  // required float distance = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.msgs.OpticalFlow)
  return target;
}

size_t OpticalFlow::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sensor_msgs.msgs.OpticalFlow)
  size_t total_size = 0;

  if (_internal_has_time_usec()) {
    // required int64 time_usec = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_usec());
  }

  if (_internal_has_sensor_id()) {
    // required int32 sensor_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sensor_id());
  }

  if (_internal_has_integration_time_us()) {
    // required int32 integration_time_us = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_integration_time_us());
  }

  if (_internal_has_integrated_x()) {
    // required float integrated_x = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_integrated_y()) {
    // required float integrated_y = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_integrated_xgyro()) {
    // required float integrated_xgyro = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_integrated_ygyro()) {
    // required float integrated_ygyro = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_integrated_zgyro()) {
    // required float integrated_zgyro = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_temperature()) {
    // required float temperature = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_quality()) {
    // required int32 quality = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quality());
  }

  if (_internal_has_time_delta_distance_us()) {
    // required int32 time_delta_distance_us = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_delta_distance_us());
  }

  if (_internal_has_distance()) {
    // required float distance = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t OpticalFlow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.msgs.OpticalFlow)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required int64 time_usec = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_usec());

    // required int32 sensor_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sensor_id());

    // required int32 integration_time_us = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_integration_time_us());

    // required float integrated_x = 4;
    total_size += 1 + 4;

    // required float integrated_y = 5;
    total_size += 1 + 4;

    // required float integrated_xgyro = 6;
    total_size += 1 + 4;

    // required float integrated_ygyro = 7;
    total_size += 1 + 4;

    // required float integrated_zgyro = 8;
    total_size += 1 + 4;

    // required float temperature = 9;
    total_size += 1 + 4;

    // required int32 quality = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quality());

    // required int32 time_delta_distance_us = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_delta_distance_us());

    // required float distance = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpticalFlow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.msgs.OpticalFlow)
  GOOGLE_DCHECK_NE(&from, this);
  const OpticalFlow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpticalFlow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.msgs.OpticalFlow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.msgs.OpticalFlow)
    MergeFrom(*source);
  }
}

void OpticalFlow::MergeFrom(const OpticalFlow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.msgs.OpticalFlow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      time_usec_ = from.time_usec_;
    }
    if (cached_has_bits & 0x00000002u) {
      sensor_id_ = from.sensor_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      integration_time_us_ = from.integration_time_us_;
    }
    if (cached_has_bits & 0x00000008u) {
      integrated_x_ = from.integrated_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      integrated_y_ = from.integrated_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      integrated_xgyro_ = from.integrated_xgyro_;
    }
    if (cached_has_bits & 0x00000040u) {
      integrated_ygyro_ = from.integrated_ygyro_;
    }
    if (cached_has_bits & 0x00000080u) {
      integrated_zgyro_ = from.integrated_zgyro_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      temperature_ = from.temperature_;
    }
    if (cached_has_bits & 0x00000200u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000400u) {
      time_delta_distance_us_ = from.time_delta_distance_us_;
    }
    if (cached_has_bits & 0x00000800u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpticalFlow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.msgs.OpticalFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpticalFlow::CopyFrom(const OpticalFlow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.msgs.OpticalFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpticalFlow::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OpticalFlow::InternalSwap(OpticalFlow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpticalFlow, distance_)
      + sizeof(OpticalFlow::distance_)
      - PROTOBUF_FIELD_OFFSET(OpticalFlow, time_usec_)>(
          reinterpret_cast<char*>(&time_usec_),
          reinterpret_cast<char*>(&other->time_usec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpticalFlow::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace sensor_msgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensor_msgs::msgs::OpticalFlow* Arena::CreateMaybeMessage< ::sensor_msgs::msgs::OpticalFlow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensor_msgs::msgs::OpticalFlow >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
