// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Odometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Odometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Odometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "quaternion.pb.h"
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Odometry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Odometry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Odometry_2eproto;
namespace nav_msgs {
namespace msgs {
class Odometry;
class OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
}  // namespace msgs
}  // namespace nav_msgs
PROTOBUF_NAMESPACE_OPEN
template<> ::nav_msgs::msgs::Odometry* Arena::CreateMaybeMessage<::nav_msgs::msgs::Odometry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nav_msgs {
namespace msgs {

// ===================================================================

class Odometry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nav_msgs.msgs.Odometry) */ {
 public:
  inline Odometry() : Odometry(nullptr) {};
  virtual ~Odometry();

  Odometry(const Odometry& from);
  Odometry(Odometry&& from) noexcept
    : Odometry() {
    *this = ::std::move(from);
  }

  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Odometry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
               &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Odometry& a, Odometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Odometry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Odometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Odometry* New() const final {
    return CreateMaybeMessage<Odometry>(nullptr);
  }

  Odometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Odometry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Odometry& from);
  void MergeFrom(const Odometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Odometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nav_msgs.msgs.Odometry";
  }
  protected:
  explicit Odometry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Odometry_2eproto);
    return ::descriptor_table_Odometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseCovarianceFieldNumber = 6,
    kVelocityCovarianceFieldNumber = 7,
    kPositionFieldNumber = 2,
    kOrientationFieldNumber = 3,
    kLinearVelocityFieldNumber = 4,
    kAngularVelocityFieldNumber = 5,
    kTimeUsecFieldNumber = 1,
  };
  // repeated float pose_covariance = 6 [packed = true];
  int pose_covariance_size() const;
  private:
  int _internal_pose_covariance_size() const;
  public:
  void clear_pose_covariance();
  private:
  float _internal_pose_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_pose_covariance() const;
  void _internal_add_pose_covariance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_pose_covariance();
  public:
  float pose_covariance(int index) const;
  void set_pose_covariance(int index, float value);
  void add_pose_covariance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pose_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pose_covariance();

  // repeated float velocity_covariance = 7 [packed = true];
  int velocity_covariance_size() const;
  private:
  int _internal_velocity_covariance_size() const;
  public:
  void clear_velocity_covariance();
  private:
  float _internal_velocity_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_velocity_covariance() const;
  void _internal_add_velocity_covariance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_velocity_covariance();
  public:
  float velocity_covariance(int index) const;
  void set_velocity_covariance(int index, float value);
  void add_velocity_covariance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      velocity_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_velocity_covariance();

  // required .gazebo.msgs.Vector3d position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::gazebo::msgs::Vector3d& position() const;
  ::gazebo::msgs::Vector3d* release_position();
  ::gazebo::msgs::Vector3d* mutable_position();
  void set_allocated_position(::gazebo::msgs::Vector3d* position);
  private:
  const ::gazebo::msgs::Vector3d& _internal_position() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::gazebo::msgs::Vector3d* position);
  ::gazebo::msgs::Vector3d* unsafe_arena_release_position();

  // required .gazebo.msgs.Quaternion orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::gazebo::msgs::Quaternion& orientation() const;
  ::gazebo::msgs::Quaternion* release_orientation();
  ::gazebo::msgs::Quaternion* mutable_orientation();
  void set_allocated_orientation(::gazebo::msgs::Quaternion* orientation);
  private:
  const ::gazebo::msgs::Quaternion& _internal_orientation() const;
  ::gazebo::msgs::Quaternion* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::gazebo::msgs::Quaternion* orientation);
  ::gazebo::msgs::Quaternion* unsafe_arena_release_orientation();

  // required .gazebo.msgs.Vector3d linear_velocity = 4;
  bool has_linear_velocity() const;
  private:
  bool _internal_has_linear_velocity() const;
  public:
  void clear_linear_velocity();
  const ::gazebo::msgs::Vector3d& linear_velocity() const;
  ::gazebo::msgs::Vector3d* release_linear_velocity();
  ::gazebo::msgs::Vector3d* mutable_linear_velocity();
  void set_allocated_linear_velocity(::gazebo::msgs::Vector3d* linear_velocity);
  private:
  const ::gazebo::msgs::Vector3d& _internal_linear_velocity() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_linear_velocity();
  public:
  void unsafe_arena_set_allocated_linear_velocity(
      ::gazebo::msgs::Vector3d* linear_velocity);
  ::gazebo::msgs::Vector3d* unsafe_arena_release_linear_velocity();

  // required .gazebo.msgs.Vector3d angular_velocity = 5;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::gazebo::msgs::Vector3d& angular_velocity() const;
  ::gazebo::msgs::Vector3d* release_angular_velocity();
  ::gazebo::msgs::Vector3d* mutable_angular_velocity();
  void set_allocated_angular_velocity(::gazebo::msgs::Vector3d* angular_velocity);
  private:
  const ::gazebo::msgs::Vector3d& _internal_angular_velocity() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_angular_velocity();
  public:
  void unsafe_arena_set_allocated_angular_velocity(
      ::gazebo::msgs::Vector3d* angular_velocity);
  ::gazebo::msgs::Vector3d* unsafe_arena_release_angular_velocity();

  // required int64 time_usec = 1;
  bool has_time_usec() const;
  private:
  bool _internal_has_time_usec() const;
  public:
  void clear_time_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 time_usec() const;
  void set_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_usec() const;
  void _internal_set_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:nav_msgs.msgs.Odometry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pose_covariance_;
  mutable std::atomic<int> _pose_covariance_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > velocity_covariance_;
  mutable std::atomic<int> _velocity_covariance_cached_byte_size_;
  ::gazebo::msgs::Vector3d* position_;
  ::gazebo::msgs::Quaternion* orientation_;
  ::gazebo::msgs::Vector3d* linear_velocity_;
  ::gazebo::msgs::Vector3d* angular_velocity_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_usec_;
  friend struct ::TableStruct_Odometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Odometry

// required int64 time_usec = 1;
inline bool Odometry::_internal_has_time_usec() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Odometry::has_time_usec() const {
  return _internal_has_time_usec();
}
inline void Odometry::clear_time_usec() {
  time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Odometry::_internal_time_usec() const {
  return time_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Odometry::time_usec() const {
  // @@protoc_insertion_point(field_get:nav_msgs.msgs.Odometry.time_usec)
  return _internal_time_usec();
}
inline void Odometry::_internal_set_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  time_usec_ = value;
}
inline void Odometry::set_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_usec(value);
  // @@protoc_insertion_point(field_set:nav_msgs.msgs.Odometry.time_usec)
}

// required .gazebo.msgs.Vector3d position = 2;
inline bool Odometry::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool Odometry::has_position() const {
  return _internal_has_position();
}
inline const ::gazebo::msgs::Vector3d& Odometry::_internal_position() const {
  const ::gazebo::msgs::Vector3d* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& Odometry::position() const {
  // @@protoc_insertion_point(field_get:nav_msgs.msgs.Odometry.position)
  return _internal_position();
}
inline void Odometry::unsafe_arena_set_allocated_position(
    ::gazebo::msgs::Vector3d* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav_msgs.msgs.Odometry.position)
}
inline ::gazebo::msgs::Vector3d* Odometry::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gazebo::msgs::Vector3d* Odometry::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:nav_msgs.msgs.Odometry.position)
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::Vector3d* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Odometry::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::gazebo::msgs::Vector3d* Odometry::mutable_position() {
  // @@protoc_insertion_point(field_mutable:nav_msgs.msgs.Odometry.position)
  return _internal_mutable_position();
}
inline void Odometry::set_allocated_position(::gazebo::msgs::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:nav_msgs.msgs.Odometry.position)
}

// required .gazebo.msgs.Quaternion orientation = 3;
inline bool Odometry::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || orientation_ != nullptr);
  return value;
}
inline bool Odometry::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::gazebo::msgs::Quaternion& Odometry::_internal_orientation() const {
  const ::gazebo::msgs::Quaternion* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Quaternion*>(
      &::gazebo::msgs::_Quaternion_default_instance_);
}
inline const ::gazebo::msgs::Quaternion& Odometry::orientation() const {
  // @@protoc_insertion_point(field_get:nav_msgs.msgs.Odometry.orientation)
  return _internal_orientation();
}
inline void Odometry::unsafe_arena_set_allocated_orientation(
    ::gazebo::msgs::Quaternion* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav_msgs.msgs.Odometry.orientation)
}
inline ::gazebo::msgs::Quaternion* Odometry::release_orientation() {
  auto temp = unsafe_arena_release_orientation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gazebo::msgs::Quaternion* Odometry::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:nav_msgs.msgs.Odometry.orientation)
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Quaternion* Odometry::_internal_mutable_orientation() {
  _has_bits_[0] |= 0x00000002u;
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Quaternion>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::gazebo::msgs::Quaternion* Odometry::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:nav_msgs.msgs.Odometry.orientation)
  return _internal_mutable_orientation();
}
inline void Odometry::set_allocated_orientation(::gazebo::msgs::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation)->GetArena();
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:nav_msgs.msgs.Odometry.orientation)
}

// required .gazebo.msgs.Vector3d linear_velocity = 4;
inline bool Odometry::_internal_has_linear_velocity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || linear_velocity_ != nullptr);
  return value;
}
inline bool Odometry::has_linear_velocity() const {
  return _internal_has_linear_velocity();
}
inline const ::gazebo::msgs::Vector3d& Odometry::_internal_linear_velocity() const {
  const ::gazebo::msgs::Vector3d* p = linear_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& Odometry::linear_velocity() const {
  // @@protoc_insertion_point(field_get:nav_msgs.msgs.Odometry.linear_velocity)
  return _internal_linear_velocity();
}
inline void Odometry::unsafe_arena_set_allocated_linear_velocity(
    ::gazebo::msgs::Vector3d* linear_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_);
  }
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav_msgs.msgs.Odometry.linear_velocity)
}
inline ::gazebo::msgs::Vector3d* Odometry::release_linear_velocity() {
  auto temp = unsafe_arena_release_linear_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gazebo::msgs::Vector3d* Odometry::unsafe_arena_release_linear_velocity() {
  // @@protoc_insertion_point(field_release:nav_msgs.msgs.Odometry.linear_velocity)
  _has_bits_[0] &= ~0x00000004u;
  ::gazebo::msgs::Vector3d* temp = linear_velocity_;
  linear_velocity_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Odometry::_internal_mutable_linear_velocity() {
  _has_bits_[0] |= 0x00000004u;
  if (linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArena());
    linear_velocity_ = p;
  }
  return linear_velocity_;
}
inline ::gazebo::msgs::Vector3d* Odometry::mutable_linear_velocity() {
  // @@protoc_insertion_point(field_mutable:nav_msgs.msgs.Odometry.linear_velocity)
  return _internal_mutable_linear_velocity();
}
inline void Odometry::set_allocated_linear_velocity(::gazebo::msgs::Vector3d* linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_);
  }
  if (linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity)->GetArena();
    if (message_arena != submessage_arena) {
      linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:nav_msgs.msgs.Odometry.linear_velocity)
}

// required .gazebo.msgs.Vector3d angular_velocity = 5;
inline bool Odometry::_internal_has_angular_velocity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || angular_velocity_ != nullptr);
  return value;
}
inline bool Odometry::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline const ::gazebo::msgs::Vector3d& Odometry::_internal_angular_velocity() const {
  const ::gazebo::msgs::Vector3d* p = angular_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& Odometry::angular_velocity() const {
  // @@protoc_insertion_point(field_get:nav_msgs.msgs.Odometry.angular_velocity)
  return _internal_angular_velocity();
}
inline void Odometry::unsafe_arena_set_allocated_angular_velocity(
    ::gazebo::msgs::Vector3d* angular_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav_msgs.msgs.Odometry.angular_velocity)
}
inline ::gazebo::msgs::Vector3d* Odometry::release_angular_velocity() {
  auto temp = unsafe_arena_release_angular_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gazebo::msgs::Vector3d* Odometry::unsafe_arena_release_angular_velocity() {
  // @@protoc_insertion_point(field_release:nav_msgs.msgs.Odometry.angular_velocity)
  _has_bits_[0] &= ~0x00000008u;
  ::gazebo::msgs::Vector3d* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Odometry::_internal_mutable_angular_velocity() {
  _has_bits_[0] |= 0x00000008u;
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArena());
    angular_velocity_ = p;
  }
  return angular_velocity_;
}
inline ::gazebo::msgs::Vector3d* Odometry::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:nav_msgs.msgs.Odometry.angular_velocity)
  return _internal_mutable_angular_velocity();
}
inline void Odometry::set_allocated_angular_velocity(::gazebo::msgs::Vector3d* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity)->GetArena();
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:nav_msgs.msgs.Odometry.angular_velocity)
}

// repeated float pose_covariance = 6 [packed = true];
inline int Odometry::_internal_pose_covariance_size() const {
  return pose_covariance_.size();
}
inline int Odometry::pose_covariance_size() const {
  return _internal_pose_covariance_size();
}
inline void Odometry::clear_pose_covariance() {
  pose_covariance_.Clear();
}
inline float Odometry::_internal_pose_covariance(int index) const {
  return pose_covariance_.Get(index);
}
inline float Odometry::pose_covariance(int index) const {
  // @@protoc_insertion_point(field_get:nav_msgs.msgs.Odometry.pose_covariance)
  return _internal_pose_covariance(index);
}
inline void Odometry::set_pose_covariance(int index, float value) {
  pose_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav_msgs.msgs.Odometry.pose_covariance)
}
inline void Odometry::_internal_add_pose_covariance(float value) {
  pose_covariance_.Add(value);
}
inline void Odometry::add_pose_covariance(float value) {
  _internal_add_pose_covariance(value);
  // @@protoc_insertion_point(field_add:nav_msgs.msgs.Odometry.pose_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Odometry::_internal_pose_covariance() const {
  return pose_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Odometry::pose_covariance() const {
  // @@protoc_insertion_point(field_list:nav_msgs.msgs.Odometry.pose_covariance)
  return _internal_pose_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Odometry::_internal_mutable_pose_covariance() {
  return &pose_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Odometry::mutable_pose_covariance() {
  // @@protoc_insertion_point(field_mutable_list:nav_msgs.msgs.Odometry.pose_covariance)
  return _internal_mutable_pose_covariance();
}

// repeated float velocity_covariance = 7 [packed = true];
inline int Odometry::_internal_velocity_covariance_size() const {
  return velocity_covariance_.size();
}
inline int Odometry::velocity_covariance_size() const {
  return _internal_velocity_covariance_size();
}
inline void Odometry::clear_velocity_covariance() {
  velocity_covariance_.Clear();
}
inline float Odometry::_internal_velocity_covariance(int index) const {
  return velocity_covariance_.Get(index);
}
inline float Odometry::velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:nav_msgs.msgs.Odometry.velocity_covariance)
  return _internal_velocity_covariance(index);
}
inline void Odometry::set_velocity_covariance(int index, float value) {
  velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav_msgs.msgs.Odometry.velocity_covariance)
}
inline void Odometry::_internal_add_velocity_covariance(float value) {
  velocity_covariance_.Add(value);
}
inline void Odometry::add_velocity_covariance(float value) {
  _internal_add_velocity_covariance(value);
  // @@protoc_insertion_point(field_add:nav_msgs.msgs.Odometry.velocity_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Odometry::_internal_velocity_covariance() const {
  return velocity_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Odometry::velocity_covariance() const {
  // @@protoc_insertion_point(field_list:nav_msgs.msgs.Odometry.velocity_covariance)
  return _internal_velocity_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Odometry::_internal_mutable_velocity_covariance() {
  return &velocity_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Odometry::mutable_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:nav_msgs.msgs.Odometry.velocity_covariance)
  return _internal_mutable_velocity_covariance();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace nav_msgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Odometry_2eproto
