// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Groundtruth.proto

#include "Groundtruth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace sensor_msgs {
namespace msgs {
class GroundtruthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Groundtruth> _instance;
} _Groundtruth_default_instance_;
}  // namespace msgs
}  // namespace sensor_msgs
static void InitDefaultsscc_info_Groundtruth_Groundtruth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensor_msgs::msgs::_Groundtruth_default_instance_;
    new (ptr) ::sensor_msgs::msgs::Groundtruth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_msgs::msgs::Groundtruth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Groundtruth_Groundtruth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Groundtruth_Groundtruth_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Groundtruth_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Groundtruth_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Groundtruth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Groundtruth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Groundtruth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Groundtruth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Groundtruth, time_usec_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Groundtruth, latitude_rad_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Groundtruth, longitude_rad_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Groundtruth, altitude_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Groundtruth, velocity_east_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Groundtruth, velocity_north_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Groundtruth, velocity_up_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Groundtruth, attitude_q_w_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Groundtruth, attitude_q_x_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Groundtruth, attitude_q_y_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Groundtruth, attitude_q_z_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::sensor_msgs::msgs::Groundtruth)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensor_msgs::msgs::_Groundtruth_default_instance_),
};

const char descriptor_table_protodef_Groundtruth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021Groundtruth.proto\022\020sensor_msgs.msgs\"\373\001"
  "\n\013Groundtruth\022\021\n\ttime_usec\030\001 \002(\003\022\024\n\014lati"
  "tude_rad\030\002 \002(\001\022\025\n\rlongitude_rad\030\003 \002(\001\022\020\n"
  "\010altitude\030\004 \002(\001\022\025\n\rvelocity_east\030\005 \001(\001\022\026"
  "\n\016velocity_north\030\006 \001(\001\022\023\n\013velocity_up\030\007 "
  "\001(\001\022\024\n\014attitude_q_w\030\010 \001(\001\022\024\n\014attitude_q_"
  "x\030\t \001(\001\022\024\n\014attitude_q_y\030\n \001(\001\022\024\n\014attitud"
  "e_q_z\030\013 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Groundtruth_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Groundtruth_2eproto_sccs[1] = {
  &scc_info_Groundtruth_Groundtruth_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Groundtruth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Groundtruth_2eproto = {
  false, false, descriptor_table_protodef_Groundtruth_2eproto, "Groundtruth.proto", 291,
  &descriptor_table_Groundtruth_2eproto_once, descriptor_table_Groundtruth_2eproto_sccs, descriptor_table_Groundtruth_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_Groundtruth_2eproto::offsets,
  file_level_metadata_Groundtruth_2eproto, 1, file_level_enum_descriptors_Groundtruth_2eproto, file_level_service_descriptors_Groundtruth_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Groundtruth_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Groundtruth_2eproto)), true);
namespace sensor_msgs {
namespace msgs {

// ===================================================================

void Groundtruth::InitAsDefaultInstance() {
}
class Groundtruth::_Internal {
 public:
  using HasBits = decltype(std::declval<Groundtruth>()._has_bits_);
  static void set_has_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latitude_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longitude_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_velocity_east(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_velocity_north(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_velocity_up(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_attitude_q_w(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_attitude_q_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_attitude_q_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_attitude_q_z(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

Groundtruth::Groundtruth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensor_msgs.msgs.Groundtruth)
}
Groundtruth::Groundtruth(const Groundtruth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_usec_, &from.time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&attitude_q_z_) -
    reinterpret_cast<char*>(&time_usec_)) + sizeof(attitude_q_z_));
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.msgs.Groundtruth)
}

void Groundtruth::SharedCtor() {
  ::memset(&time_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attitude_q_z_) -
      reinterpret_cast<char*>(&time_usec_)) + sizeof(attitude_q_z_));
}

Groundtruth::~Groundtruth() {
  // @@protoc_insertion_point(destructor:sensor_msgs.msgs.Groundtruth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Groundtruth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Groundtruth::ArenaDtor(void* object) {
  Groundtruth* _this = reinterpret_cast< Groundtruth* >(object);
  (void)_this;
}
void Groundtruth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Groundtruth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Groundtruth& Groundtruth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Groundtruth_Groundtruth_2eproto.base);
  return *internal_default_instance();
}


void Groundtruth::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.msgs.Groundtruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&time_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attitude_q_w_) -
        reinterpret_cast<char*>(&time_usec_)) + sizeof(attitude_q_w_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&attitude_q_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attitude_q_z_) -
        reinterpret_cast<char*>(&attitude_q_x_)) + sizeof(attitude_q_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Groundtruth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_usec(&has_bits);
          time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double latitude_rad = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_latitude_rad(&has_bits);
          latitude_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double longitude_rad = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_longitude_rad(&has_bits);
          longitude_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double altitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_altitude(&has_bits);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double velocity_east = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_velocity_east(&has_bits);
          velocity_east_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double velocity_north = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_velocity_north(&has_bits);
          velocity_north_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double velocity_up = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_velocity_up(&has_bits);
          velocity_up_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double attitude_q_w = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_attitude_q_w(&has_bits);
          attitude_q_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double attitude_q_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_attitude_q_x(&has_bits);
          attitude_q_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double attitude_q_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_attitude_q_y(&has_bits);
          attitude_q_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double attitude_q_z = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_attitude_q_z(&has_bits);
          attitude_q_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Groundtruth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.msgs.Groundtruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time_usec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time_usec(), target);
  }

  // required double latitude_rad = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude_rad(), target);
  }

  // required double longitude_rad = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_longitude_rad(), target);
  }

  // required double altitude = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_altitude(), target);
  }

  // optional double velocity_east = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_velocity_east(), target);
  }

  // optional double velocity_north = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_velocity_north(), target);
  }

  // optional double velocity_up = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_velocity_up(), target);
  }

  // optional double attitude_q_w = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_attitude_q_w(), target);
  }

  // optional double attitude_q_x = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_attitude_q_x(), target);
  }

  // optional double attitude_q_y = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_attitude_q_y(), target);
  }

  // optional double attitude_q_z = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_attitude_q_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.msgs.Groundtruth)
  return target;
}

size_t Groundtruth::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sensor_msgs.msgs.Groundtruth)
  size_t total_size = 0;

  if (_internal_has_time_usec()) {
    // required int64 time_usec = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_usec());
  }

  if (_internal_has_latitude_rad()) {
    // required double latitude_rad = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_longitude_rad()) {
    // required double longitude_rad = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_altitude()) {
    // required double altitude = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Groundtruth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.msgs.Groundtruth)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 time_usec = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_usec());

    // required double latitude_rad = 2;
    total_size += 1 + 8;

    // required double longitude_rad = 3;
    total_size += 1 + 8;

    // required double altitude = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f0u) {
    // optional double velocity_east = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double velocity_north = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double velocity_up = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double attitude_q_w = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double attitude_q_x = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double attitude_q_y = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double attitude_q_z = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Groundtruth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.msgs.Groundtruth)
  GOOGLE_DCHECK_NE(&from, this);
  const Groundtruth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Groundtruth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.msgs.Groundtruth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.msgs.Groundtruth)
    MergeFrom(*source);
  }
}

void Groundtruth::MergeFrom(const Groundtruth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.msgs.Groundtruth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      time_usec_ = from.time_usec_;
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_rad_ = from.latitude_rad_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_rad_ = from.longitude_rad_;
    }
    if (cached_has_bits & 0x00000008u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      velocity_east_ = from.velocity_east_;
    }
    if (cached_has_bits & 0x00000020u) {
      velocity_north_ = from.velocity_north_;
    }
    if (cached_has_bits & 0x00000040u) {
      velocity_up_ = from.velocity_up_;
    }
    if (cached_has_bits & 0x00000080u) {
      attitude_q_w_ = from.attitude_q_w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      attitude_q_x_ = from.attitude_q_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      attitude_q_y_ = from.attitude_q_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      attitude_q_z_ = from.attitude_q_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Groundtruth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.msgs.Groundtruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Groundtruth::CopyFrom(const Groundtruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.msgs.Groundtruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Groundtruth::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Groundtruth::InternalSwap(Groundtruth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Groundtruth, attitude_q_z_)
      + sizeof(Groundtruth::attitude_q_z_)
      - PROTOBUF_FIELD_OFFSET(Groundtruth, time_usec_)>(
          reinterpret_cast<char*>(&time_usec_),
          reinterpret_cast<char*>(&other->time_usec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Groundtruth::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace sensor_msgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensor_msgs::msgs::Groundtruth* Arena::CreateMaybeMessage< ::sensor_msgs::msgs::Groundtruth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensor_msgs::msgs::Groundtruth >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
