// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Range.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Range_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Range_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "quaternion.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Range_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Range_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Range_2eproto;
namespace sensor_msgs {
namespace msgs {
class Range;
class RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
}  // namespace msgs
}  // namespace sensor_msgs
PROTOBUF_NAMESPACE_OPEN
template<> ::sensor_msgs::msgs::Range* Arena::CreateMaybeMessage<::sensor_msgs::msgs::Range>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sensor_msgs {
namespace msgs {

// ===================================================================

class Range PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.msgs.Range) */ {
 public:
  inline Range() : Range(nullptr) {};
  virtual ~Range();

  Range(const Range& from);
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline Range& operator=(Range&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Range& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }
  inline void Swap(Range* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Range* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Range* New() const final {
    return CreateMaybeMessage<Range>(nullptr);
  }

  Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensor_msgs.msgs.Range";
  }
  protected:
  explicit Range(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Range_2eproto);
    return ::descriptor_table_Range_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationFieldNumber = 7,
    kTimeUsecFieldNumber = 1,
    kMinDistanceFieldNumber = 2,
    kMaxDistanceFieldNumber = 3,
    kCurrentDistanceFieldNumber = 4,
    kHFovFieldNumber = 5,
    kVFovFieldNumber = 6,
    kSignalQualityFieldNumber = 8,
  };
  // optional .gazebo.msgs.Quaternion orientation = 7;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::gazebo::msgs::Quaternion& orientation() const;
  ::gazebo::msgs::Quaternion* release_orientation();
  ::gazebo::msgs::Quaternion* mutable_orientation();
  void set_allocated_orientation(::gazebo::msgs::Quaternion* orientation);
  private:
  const ::gazebo::msgs::Quaternion& _internal_orientation() const;
  ::gazebo::msgs::Quaternion* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::gazebo::msgs::Quaternion* orientation);
  ::gazebo::msgs::Quaternion* unsafe_arena_release_orientation();

  // required int64 time_usec = 1;
  bool has_time_usec() const;
  private:
  bool _internal_has_time_usec() const;
  public:
  void clear_time_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 time_usec() const;
  void set_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_usec() const;
  void _internal_set_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required float min_distance = 2;
  bool has_min_distance() const;
  private:
  bool _internal_has_min_distance() const;
  public:
  void clear_min_distance();
  float min_distance() const;
  void set_min_distance(float value);
  private:
  float _internal_min_distance() const;
  void _internal_set_min_distance(float value);
  public:

  // required float max_distance = 3;
  bool has_max_distance() const;
  private:
  bool _internal_has_max_distance() const;
  public:
  void clear_max_distance();
  float max_distance() const;
  void set_max_distance(float value);
  private:
  float _internal_max_distance() const;
  void _internal_set_max_distance(float value);
  public:

  // required float current_distance = 4;
  bool has_current_distance() const;
  private:
  bool _internal_has_current_distance() const;
  public:
  void clear_current_distance();
  float current_distance() const;
  void set_current_distance(float value);
  private:
  float _internal_current_distance() const;
  void _internal_set_current_distance(float value);
  public:

  // optional float h_fov = 5;
  bool has_h_fov() const;
  private:
  bool _internal_has_h_fov() const;
  public:
  void clear_h_fov();
  float h_fov() const;
  void set_h_fov(float value);
  private:
  float _internal_h_fov() const;
  void _internal_set_h_fov(float value);
  public:

  // optional float v_fov = 6;
  bool has_v_fov() const;
  private:
  bool _internal_has_v_fov() const;
  public:
  void clear_v_fov();
  float v_fov() const;
  void set_v_fov(float value);
  private:
  float _internal_v_fov() const;
  void _internal_set_v_fov(float value);
  public:

  // optional int32 signal_quality = 8;
  bool has_signal_quality() const;
  private:
  bool _internal_has_signal_quality() const;
  public:
  void clear_signal_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 signal_quality() const;
  void set_signal_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signal_quality() const;
  void _internal_set_signal_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sensor_msgs.msgs.Range)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gazebo::msgs::Quaternion* orientation_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_usec_;
  float min_distance_;
  float max_distance_;
  float current_distance_;
  float h_fov_;
  float v_fov_;
  ::PROTOBUF_NAMESPACE_ID::int32 signal_quality_;
  friend struct ::TableStruct_Range_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Range

// required int64 time_usec = 1;
inline bool Range::_internal_has_time_usec() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Range::has_time_usec() const {
  return _internal_has_time_usec();
}
inline void Range::clear_time_usec() {
  time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Range::_internal_time_usec() const {
  return time_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Range::time_usec() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Range.time_usec)
  return _internal_time_usec();
}
inline void Range::_internal_set_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  time_usec_ = value;
}
inline void Range::set_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_usec(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Range.time_usec)
}

// required float min_distance = 2;
inline bool Range::_internal_has_min_distance() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Range::has_min_distance() const {
  return _internal_has_min_distance();
}
inline void Range::clear_min_distance() {
  min_distance_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Range::_internal_min_distance() const {
  return min_distance_;
}
inline float Range::min_distance() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Range.min_distance)
  return _internal_min_distance();
}
inline void Range::_internal_set_min_distance(float value) {
  _has_bits_[0] |= 0x00000004u;
  min_distance_ = value;
}
inline void Range::set_min_distance(float value) {
  _internal_set_min_distance(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Range.min_distance)
}

// required float max_distance = 3;
inline bool Range::_internal_has_max_distance() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Range::has_max_distance() const {
  return _internal_has_max_distance();
}
inline void Range::clear_max_distance() {
  max_distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Range::_internal_max_distance() const {
  return max_distance_;
}
inline float Range::max_distance() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Range.max_distance)
  return _internal_max_distance();
}
inline void Range::_internal_set_max_distance(float value) {
  _has_bits_[0] |= 0x00000008u;
  max_distance_ = value;
}
inline void Range::set_max_distance(float value) {
  _internal_set_max_distance(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Range.max_distance)
}

// required float current_distance = 4;
inline bool Range::_internal_has_current_distance() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Range::has_current_distance() const {
  return _internal_has_current_distance();
}
inline void Range::clear_current_distance() {
  current_distance_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Range::_internal_current_distance() const {
  return current_distance_;
}
inline float Range::current_distance() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Range.current_distance)
  return _internal_current_distance();
}
inline void Range::_internal_set_current_distance(float value) {
  _has_bits_[0] |= 0x00000010u;
  current_distance_ = value;
}
inline void Range::set_current_distance(float value) {
  _internal_set_current_distance(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Range.current_distance)
}

// optional float h_fov = 5;
inline bool Range::_internal_has_h_fov() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Range::has_h_fov() const {
  return _internal_has_h_fov();
}
inline void Range::clear_h_fov() {
  h_fov_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Range::_internal_h_fov() const {
  return h_fov_;
}
inline float Range::h_fov() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Range.h_fov)
  return _internal_h_fov();
}
inline void Range::_internal_set_h_fov(float value) {
  _has_bits_[0] |= 0x00000020u;
  h_fov_ = value;
}
inline void Range::set_h_fov(float value) {
  _internal_set_h_fov(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Range.h_fov)
}

// optional float v_fov = 6;
inline bool Range::_internal_has_v_fov() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Range::has_v_fov() const {
  return _internal_has_v_fov();
}
inline void Range::clear_v_fov() {
  v_fov_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float Range::_internal_v_fov() const {
  return v_fov_;
}
inline float Range::v_fov() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Range.v_fov)
  return _internal_v_fov();
}
inline void Range::_internal_set_v_fov(float value) {
  _has_bits_[0] |= 0x00000040u;
  v_fov_ = value;
}
inline void Range::set_v_fov(float value) {
  _internal_set_v_fov(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Range.v_fov)
}

// optional .gazebo.msgs.Quaternion orientation = 7;
inline bool Range::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || orientation_ != nullptr);
  return value;
}
inline bool Range::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::gazebo::msgs::Quaternion& Range::_internal_orientation() const {
  const ::gazebo::msgs::Quaternion* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Quaternion*>(
      &::gazebo::msgs::_Quaternion_default_instance_);
}
inline const ::gazebo::msgs::Quaternion& Range::orientation() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Range.orientation)
  return _internal_orientation();
}
inline void Range::unsafe_arena_set_allocated_orientation(
    ::gazebo::msgs::Quaternion* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensor_msgs.msgs.Range.orientation)
}
inline ::gazebo::msgs::Quaternion* Range::release_orientation() {
  auto temp = unsafe_arena_release_orientation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gazebo::msgs::Quaternion* Range::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:sensor_msgs.msgs.Range.orientation)
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Quaternion* Range::_internal_mutable_orientation() {
  _has_bits_[0] |= 0x00000001u;
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Quaternion>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::gazebo::msgs::Quaternion* Range::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.msgs.Range.orientation)
  return _internal_mutable_orientation();
}
inline void Range::set_allocated_orientation(::gazebo::msgs::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation)->GetArena();
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.msgs.Range.orientation)
}

// optional int32 signal_quality = 8;
inline bool Range::_internal_has_signal_quality() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Range::has_signal_quality() const {
  return _internal_has_signal_quality();
}
inline void Range::clear_signal_quality() {
  signal_quality_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Range::_internal_signal_quality() const {
  return signal_quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Range::signal_quality() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Range.signal_quality)
  return _internal_signal_quality();
}
inline void Range::_internal_set_signal_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  signal_quality_ = value;
}
inline void Range::set_signal_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signal_quality(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Range.signal_quality)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Range_2eproto
