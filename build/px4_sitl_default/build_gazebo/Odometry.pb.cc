// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Odometry.proto

#include "Odometry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_quaternion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_quaternion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_vector3d_2eproto;
namespace nav_msgs {
namespace msgs {
class OdometryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Odometry> _instance;
} _Odometry_default_instance_;
}  // namespace msgs
}  // namespace nav_msgs
static void InitDefaultsscc_info_Odometry_Odometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nav_msgs::msgs::_Odometry_default_instance_;
    new (ptr) ::nav_msgs::msgs::Odometry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nav_msgs::msgs::Odometry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Odometry_Odometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Odometry_Odometry_2eproto}, {
      &scc_info_Vector3d_vector3d_2eproto.base,
      &scc_info_Quaternion_quaternion_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Odometry_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Odometry_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Odometry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Odometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::nav_msgs::msgs::Odometry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nav_msgs::msgs::Odometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nav_msgs::msgs::Odometry, time_usec_),
  PROTOBUF_FIELD_OFFSET(::nav_msgs::msgs::Odometry, position_),
  PROTOBUF_FIELD_OFFSET(::nav_msgs::msgs::Odometry, orientation_),
  PROTOBUF_FIELD_OFFSET(::nav_msgs::msgs::Odometry, linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::nav_msgs::msgs::Odometry, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::nav_msgs::msgs::Odometry, pose_covariance_),
  PROTOBUF_FIELD_OFFSET(::nav_msgs::msgs::Odometry, velocity_covariance_),
  4,
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::nav_msgs::msgs::Odometry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nav_msgs::msgs::_Odometry_default_instance_),
};

const char descriptor_table_protodef_Odometry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Odometry.proto\022\rnav_msgs.msgs\032\020quatern"
  "ion.proto\032\016vector3d.proto\"\223\002\n\010Odometry\022\021"
  "\n\ttime_usec\030\001 \002(\003\022\'\n\010position\030\002 \002(\0132\025.ga"
  "zebo.msgs.Vector3d\022,\n\013orientation\030\003 \002(\0132"
  "\027.gazebo.msgs.Quaternion\022.\n\017linear_veloc"
  "ity\030\004 \002(\0132\025.gazebo.msgs.Vector3d\022/\n\020angu"
  "lar_velocity\030\005 \002(\0132\025.gazebo.msgs.Vector3"
  "d\022\033\n\017pose_covariance\030\006 \003(\002B\002\020\001\022\037\n\023veloci"
  "ty_covariance\030\007 \003(\002B\002\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Odometry_2eproto_deps[2] = {
  &::descriptor_table_quaternion_2eproto,
  &::descriptor_table_vector3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Odometry_2eproto_sccs[1] = {
  &scc_info_Odometry_Odometry_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Odometry_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Odometry_2eproto = {
  false, false, descriptor_table_protodef_Odometry_2eproto, "Odometry.proto", 343,
  &descriptor_table_Odometry_2eproto_once, descriptor_table_Odometry_2eproto_sccs, descriptor_table_Odometry_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_Odometry_2eproto::offsets,
  file_level_metadata_Odometry_2eproto, 1, file_level_enum_descriptors_Odometry_2eproto, file_level_service_descriptors_Odometry_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Odometry_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Odometry_2eproto)), true);
namespace nav_msgs {
namespace msgs {

// ===================================================================

void Odometry::InitAsDefaultInstance() {
  ::nav_msgs::msgs::_Odometry_default_instance_._instance.get_mutable()->position_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::nav_msgs::msgs::_Odometry_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::gazebo::msgs::Quaternion*>(
      ::gazebo::msgs::Quaternion::internal_default_instance());
  ::nav_msgs::msgs::_Odometry_default_instance_._instance.get_mutable()->linear_velocity_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::nav_msgs::msgs::_Odometry_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
}
class Odometry::_Internal {
 public:
  using HasBits = decltype(std::declval<Odometry>()._has_bits_);
  static void set_has_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::gazebo::msgs::Vector3d& position(const Odometry* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::Quaternion& orientation(const Odometry* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gazebo::msgs::Vector3d& linear_velocity(const Odometry* msg);
  static void set_has_linear_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::gazebo::msgs::Vector3d& angular_velocity(const Odometry* msg);
  static void set_has_angular_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::gazebo::msgs::Vector3d&
Odometry::_Internal::position(const Odometry* msg) {
  return *msg->position_;
}
const ::gazebo::msgs::Quaternion&
Odometry::_Internal::orientation(const Odometry* msg) {
  return *msg->orientation_;
}
const ::gazebo::msgs::Vector3d&
Odometry::_Internal::linear_velocity(const Odometry* msg) {
  return *msg->linear_velocity_;
}
const ::gazebo::msgs::Vector3d&
Odometry::_Internal::angular_velocity(const Odometry* msg) {
  return *msg->angular_velocity_;
}
void Odometry::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Odometry::clear_orientation() {
  if (orientation_ != nullptr) orientation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Odometry::clear_linear_velocity() {
  if (linear_velocity_ != nullptr) linear_velocity_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Odometry::clear_angular_velocity() {
  if (angular_velocity_ != nullptr) angular_velocity_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
Odometry::Odometry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pose_covariance_(arena),
  velocity_covariance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nav_msgs.msgs.Odometry)
}
Odometry::Odometry(const Odometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pose_covariance_(from.pose_covariance_),
      velocity_covariance_(from.velocity_covariance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::gazebo::msgs::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::gazebo::msgs::Quaternion(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from._internal_has_linear_velocity()) {
    linear_velocity_ = new ::gazebo::msgs::Vector3d(*from.linear_velocity_);
  } else {
    linear_velocity_ = nullptr;
  }
  if (from._internal_has_angular_velocity()) {
    angular_velocity_ = new ::gazebo::msgs::Vector3d(*from.angular_velocity_);
  } else {
    angular_velocity_ = nullptr;
  }
  time_usec_ = from.time_usec_;
  // @@protoc_insertion_point(copy_constructor:nav_msgs.msgs.Odometry)
}

void Odometry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Odometry_Odometry_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_usec_) -
      reinterpret_cast<char*>(&position_)) + sizeof(time_usec_));
}

Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:nav_msgs.msgs.Odometry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Odometry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete angular_velocity_;
}

void Odometry::ArenaDtor(void* object) {
  Odometry* _this = reinterpret_cast< Odometry* >(object);
  (void)_this;
}
void Odometry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Odometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Odometry& Odometry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Odometry_Odometry_2eproto.base);
  return *internal_default_instance();
}


void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:nav_msgs.msgs.Odometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pose_covariance_.Clear();
  velocity_covariance_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(orientation_ != nullptr);
      orientation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(linear_velocity_ != nullptr);
      linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(angular_velocity_ != nullptr);
      angular_velocity_->Clear();
    }
  }
  time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Odometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_usec(&has_bits);
          time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Vector3d position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Quaternion orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Vector3d linear_velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Vector3d angular_velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float pose_covariance = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_pose_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_pose_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float velocity_covariance = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_velocity_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_velocity_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Odometry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav_msgs.msgs.Odometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time_usec = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time_usec(), target);
  }

  // required .gazebo.msgs.Vector3d position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // required .gazebo.msgs.Quaternion orientation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  // required .gazebo.msgs.Vector3d linear_velocity = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::linear_velocity(this), target, stream);
  }

  // required .gazebo.msgs.Vector3d angular_velocity = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::angular_velocity(this), target, stream);
  }

  // repeated float pose_covariance = 6 [packed = true];
  if (this->_internal_pose_covariance_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_pose_covariance(), target);
  }

  // repeated float velocity_covariance = 7 [packed = true];
  if (this->_internal_velocity_covariance_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_velocity_covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav_msgs.msgs.Odometry)
  return target;
}

size_t Odometry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:nav_msgs.msgs.Odometry)
  size_t total_size = 0;

  if (_internal_has_position()) {
    // required .gazebo.msgs.Vector3d position = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (_internal_has_orientation()) {
    // required .gazebo.msgs.Quaternion orientation = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  if (_internal_has_linear_velocity()) {
    // required .gazebo.msgs.Vector3d linear_velocity = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_velocity_);
  }

  if (_internal_has_angular_velocity()) {
    // required .gazebo.msgs.Vector3d angular_velocity = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  if (_internal_has_time_usec()) {
    // required int64 time_usec = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_usec());
  }

  return total_size;
}
size_t Odometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nav_msgs.msgs.Odometry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Vector3d position = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);

    // required .gazebo.msgs.Quaternion orientation = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);

    // required .gazebo.msgs.Vector3d linear_velocity = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_velocity_);

    // required .gazebo.msgs.Vector3d angular_velocity = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_);

    // required int64 time_usec = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_usec());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float pose_covariance = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pose_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pose_covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float velocity_covariance = 7 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_velocity_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _velocity_covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odometry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nav_msgs.msgs.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Odometry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Odometry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nav_msgs.msgs.Odometry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nav_msgs.msgs.Odometry)
    MergeFrom(*source);
  }
}

void Odometry::MergeFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nav_msgs.msgs.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pose_covariance_.MergeFrom(from.pose_covariance_);
  velocity_covariance_.MergeFrom(from.velocity_covariance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_orientation()->::gazebo::msgs::Quaternion::MergeFrom(from._internal_orientation());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_linear_velocity()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_linear_velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_angular_velocity()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_angular_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      time_usec_ = from.time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Odometry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nav_msgs.msgs.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nav_msgs.msgs.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odometry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_position()) {
    if (!position_->IsInitialized()) return false;
  }
  if (_internal_has_orientation()) {
    if (!orientation_->IsInitialized()) return false;
  }
  if (_internal_has_linear_velocity()) {
    if (!linear_velocity_->IsInitialized()) return false;
  }
  if (_internal_has_angular_velocity()) {
    if (!angular_velocity_->IsInitialized()) return false;
  }
  return true;
}

void Odometry::InternalSwap(Odometry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pose_covariance_.InternalSwap(&other->pose_covariance_);
  velocity_covariance_.InternalSwap(&other->velocity_covariance_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Odometry, time_usec_)
      + sizeof(Odometry::time_usec_)
      - PROTOBUF_FIELD_OFFSET(Odometry, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Odometry::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace nav_msgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nav_msgs::msgs::Odometry* Arena::CreateMaybeMessage< ::nav_msgs::msgs::Odometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nav_msgs::msgs::Odometry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
