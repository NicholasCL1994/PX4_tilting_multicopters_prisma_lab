// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MagneticField.proto

#include "MagneticField.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vector3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_vector3d_2eproto;
namespace sensor_msgs {
namespace msgs {
class MagneticFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MagneticField> _instance;
} _MagneticField_default_instance_;
}  // namespace msgs
}  // namespace sensor_msgs
static void InitDefaultsscc_info_MagneticField_MagneticField_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensor_msgs::msgs::_MagneticField_default_instance_;
    new (ptr) ::sensor_msgs::msgs::MagneticField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_msgs::msgs::MagneticField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MagneticField_MagneticField_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MagneticField_MagneticField_2eproto}, {
      &scc_info_Vector3d_vector3d_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MagneticField_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MagneticField_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MagneticField_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MagneticField_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::MagneticField, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::MagneticField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::MagneticField, time_usec_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::MagneticField, magnetic_field_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::MagneticField, magnetic_field_covariance_),
  1,
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::sensor_msgs::msgs::MagneticField)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensor_msgs::msgs::_MagneticField_default_instance_),
};

const char descriptor_table_protodef_MagneticField_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023MagneticField.proto\022\020sensor_msgs.msgs\032"
  "\016vector3d.proto\"x\n\rMagneticField\022\021\n\ttime"
  "_usec\030\001 \002(\003\022-\n\016magnetic_field\030\002 \002(\0132\025.ga"
  "zebo.msgs.Vector3d\022%\n\031magnetic_field_cov"
  "ariance\030\003 \003(\002B\002\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MagneticField_2eproto_deps[1] = {
  &::descriptor_table_vector3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MagneticField_2eproto_sccs[1] = {
  &scc_info_MagneticField_MagneticField_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MagneticField_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MagneticField_2eproto = {
  false, false, descriptor_table_protodef_MagneticField_2eproto, "MagneticField.proto", 177,
  &descriptor_table_MagneticField_2eproto_once, descriptor_table_MagneticField_2eproto_sccs, descriptor_table_MagneticField_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_MagneticField_2eproto::offsets,
  file_level_metadata_MagneticField_2eproto, 1, file_level_enum_descriptors_MagneticField_2eproto, file_level_service_descriptors_MagneticField_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MagneticField_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MagneticField_2eproto)), true);
namespace sensor_msgs {
namespace msgs {

// ===================================================================

void MagneticField::InitAsDefaultInstance() {
  ::sensor_msgs::msgs::_MagneticField_default_instance_._instance.get_mutable()->magnetic_field_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
}
class MagneticField::_Internal {
 public:
  using HasBits = decltype(std::declval<MagneticField>()._has_bits_);
  static void set_has_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gazebo::msgs::Vector3d& magnetic_field(const MagneticField* msg);
  static void set_has_magnetic_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::gazebo::msgs::Vector3d&
MagneticField::_Internal::magnetic_field(const MagneticField* msg) {
  return *msg->magnetic_field_;
}
void MagneticField::clear_magnetic_field() {
  if (magnetic_field_ != nullptr) magnetic_field_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MagneticField::MagneticField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  magnetic_field_covariance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensor_msgs.msgs.MagneticField)
}
MagneticField::MagneticField(const MagneticField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      magnetic_field_covariance_(from.magnetic_field_covariance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_magnetic_field()) {
    magnetic_field_ = new ::gazebo::msgs::Vector3d(*from.magnetic_field_);
  } else {
    magnetic_field_ = nullptr;
  }
  time_usec_ = from.time_usec_;
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.msgs.MagneticField)
}

void MagneticField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MagneticField_MagneticField_2eproto.base);
  ::memset(&magnetic_field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_usec_) -
      reinterpret_cast<char*>(&magnetic_field_)) + sizeof(time_usec_));
}

MagneticField::~MagneticField() {
  // @@protoc_insertion_point(destructor:sensor_msgs.msgs.MagneticField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MagneticField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete magnetic_field_;
}

void MagneticField::ArenaDtor(void* object) {
  MagneticField* _this = reinterpret_cast< MagneticField* >(object);
  (void)_this;
}
void MagneticField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MagneticField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MagneticField& MagneticField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MagneticField_MagneticField_2eproto.base);
  return *internal_default_instance();
}


void MagneticField::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.msgs.MagneticField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  magnetic_field_covariance_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(magnetic_field_ != nullptr);
    magnetic_field_->Clear();
  }
  time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MagneticField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_usec(&has_bits);
          time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Vector3d magnetic_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_magnetic_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float magnetic_field_covariance = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_magnetic_field_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_magnetic_field_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MagneticField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.msgs.MagneticField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time_usec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time_usec(), target);
  }

  // required .gazebo.msgs.Vector3d magnetic_field = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::magnetic_field(this), target, stream);
  }

  // repeated float magnetic_field_covariance = 3 [packed = true];
  if (this->_internal_magnetic_field_covariance_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_magnetic_field_covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.msgs.MagneticField)
  return target;
}

size_t MagneticField::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sensor_msgs.msgs.MagneticField)
  size_t total_size = 0;

  if (_internal_has_magnetic_field()) {
    // required .gazebo.msgs.Vector3d magnetic_field = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *magnetic_field_);
  }

  if (_internal_has_time_usec()) {
    // required int64 time_usec = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_usec());
  }

  return total_size;
}
size_t MagneticField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.msgs.MagneticField)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Vector3d magnetic_field = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *magnetic_field_);

    // required int64 time_usec = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_usec());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float magnetic_field_covariance = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_magnetic_field_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _magnetic_field_covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MagneticField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.msgs.MagneticField)
  GOOGLE_DCHECK_NE(&from, this);
  const MagneticField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MagneticField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.msgs.MagneticField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.msgs.MagneticField)
    MergeFrom(*source);
  }
}

void MagneticField::MergeFrom(const MagneticField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.msgs.MagneticField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  magnetic_field_covariance_.MergeFrom(from.magnetic_field_covariance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_magnetic_field()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_magnetic_field());
    }
    if (cached_has_bits & 0x00000002u) {
      time_usec_ = from.time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MagneticField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.msgs.MagneticField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagneticField::CopyFrom(const MagneticField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.msgs.MagneticField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagneticField::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_magnetic_field()) {
    if (!magnetic_field_->IsInitialized()) return false;
  }
  return true;
}

void MagneticField::InternalSwap(MagneticField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  magnetic_field_covariance_.InternalSwap(&other->magnetic_field_covariance_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MagneticField, time_usec_)
      + sizeof(MagneticField::time_usec_)
      - PROTOBUF_FIELD_OFFSET(MagneticField, magnetic_field_)>(
          reinterpret_cast<char*>(&magnetic_field_),
          reinterpret_cast<char*>(&other->magnetic_field_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MagneticField::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace sensor_msgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensor_msgs::msgs::MagneticField* Arena::CreateMaybeMessage< ::sensor_msgs::msgs::MagneticField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensor_msgs::msgs::MagneticField >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
