// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SITLGps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SITLGps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SITLGps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SITLGps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SITLGps_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SITLGps_2eproto;
namespace sensor_msgs {
namespace msgs {
class SITLGps;
class SITLGpsDefaultTypeInternal;
extern SITLGpsDefaultTypeInternal _SITLGps_default_instance_;
}  // namespace msgs
}  // namespace sensor_msgs
PROTOBUF_NAMESPACE_OPEN
template<> ::sensor_msgs::msgs::SITLGps* Arena::CreateMaybeMessage<::sensor_msgs::msgs::SITLGps>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sensor_msgs {
namespace msgs {

// ===================================================================

class SITLGps PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.msgs.SITLGps) */ {
 public:
  inline SITLGps() : SITLGps(nullptr) {};
  virtual ~SITLGps();

  SITLGps(const SITLGps& from);
  SITLGps(SITLGps&& from) noexcept
    : SITLGps() {
    *this = ::std::move(from);
  }

  inline SITLGps& operator=(const SITLGps& from) {
    CopyFrom(from);
    return *this;
  }
  inline SITLGps& operator=(SITLGps&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SITLGps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SITLGps* internal_default_instance() {
    return reinterpret_cast<const SITLGps*>(
               &_SITLGps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SITLGps& a, SITLGps& b) {
    a.Swap(&b);
  }
  inline void Swap(SITLGps* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SITLGps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SITLGps* New() const final {
    return CreateMaybeMessage<SITLGps>(nullptr);
  }

  SITLGps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SITLGps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SITLGps& from);
  void MergeFrom(const SITLGps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SITLGps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensor_msgs.msgs.SITLGps";
  }
  protected:
  explicit SITLGps(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SITLGps_2eproto);
    return ::descriptor_table_SITLGps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeUsecFieldNumber = 1,
    kTimeUtcUsecFieldNumber = 2,
    kLatitudeDegFieldNumber = 3,
    kLongitudeDegFieldNumber = 4,
    kAltitudeFieldNumber = 5,
    kEphFieldNumber = 6,
    kEpvFieldNumber = 7,
    kVelocityFieldNumber = 8,
    kVelocityEastFieldNumber = 9,
    kVelocityNorthFieldNumber = 10,
    kVelocityUpFieldNumber = 11,
  };
  // required uint64 time_usec = 1;
  bool has_time_usec() const;
  private:
  bool _internal_has_time_usec() const;
  public:
  void clear_time_usec();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_usec() const;
  void set_time_usec(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_usec() const;
  void _internal_set_time_usec(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 time_utc_usec = 2;
  bool has_time_utc_usec() const;
  private:
  bool _internal_has_time_utc_usec() const;
  public:
  void clear_time_utc_usec();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_utc_usec() const;
  void set_time_utc_usec(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_utc_usec() const;
  void _internal_set_time_utc_usec(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required double latitude_deg = 3;
  bool has_latitude_deg() const;
  private:
  bool _internal_has_latitude_deg() const;
  public:
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // required double longitude_deg = 4;
  bool has_longitude_deg() const;
  private:
  bool _internal_has_longitude_deg() const;
  public:
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // required double altitude = 5;
  bool has_altitude() const;
  private:
  bool _internal_has_altitude() const;
  public:
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // optional double eph = 6;
  bool has_eph() const;
  private:
  bool _internal_has_eph() const;
  public:
  void clear_eph();
  double eph() const;
  void set_eph(double value);
  private:
  double _internal_eph() const;
  void _internal_set_eph(double value);
  public:

  // optional double epv = 7;
  bool has_epv() const;
  private:
  bool _internal_has_epv() const;
  public:
  void clear_epv();
  double epv() const;
  void set_epv(double value);
  private:
  double _internal_epv() const;
  void _internal_set_epv(double value);
  public:

  // optional double velocity = 8;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  double velocity() const;
  void set_velocity(double value);
  private:
  double _internal_velocity() const;
  void _internal_set_velocity(double value);
  public:

  // optional double velocity_east = 9;
  bool has_velocity_east() const;
  private:
  bool _internal_has_velocity_east() const;
  public:
  void clear_velocity_east();
  double velocity_east() const;
  void set_velocity_east(double value);
  private:
  double _internal_velocity_east() const;
  void _internal_set_velocity_east(double value);
  public:

  // optional double velocity_north = 10;
  bool has_velocity_north() const;
  private:
  bool _internal_has_velocity_north() const;
  public:
  void clear_velocity_north();
  double velocity_north() const;
  void set_velocity_north(double value);
  private:
  double _internal_velocity_north() const;
  void _internal_set_velocity_north(double value);
  public:

  // optional double velocity_up = 11;
  bool has_velocity_up() const;
  private:
  bool _internal_has_velocity_up() const;
  public:
  void clear_velocity_up();
  double velocity_up() const;
  void set_velocity_up(double value);
  private:
  double _internal_velocity_up() const;
  void _internal_set_velocity_up(double value);
  public:

  // @@protoc_insertion_point(class_scope:sensor_msgs.msgs.SITLGps)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_usec_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_utc_usec_;
  double latitude_deg_;
  double longitude_deg_;
  double altitude_;
  double eph_;
  double epv_;
  double velocity_;
  double velocity_east_;
  double velocity_north_;
  double velocity_up_;
  friend struct ::TableStruct_SITLGps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SITLGps

// required uint64 time_usec = 1;
inline bool SITLGps::_internal_has_time_usec() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SITLGps::has_time_usec() const {
  return _internal_has_time_usec();
}
inline void SITLGps::clear_time_usec() {
  time_usec_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SITLGps::_internal_time_usec() const {
  return time_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SITLGps::time_usec() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.SITLGps.time_usec)
  return _internal_time_usec();
}
inline void SITLGps::_internal_set_time_usec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  time_usec_ = value;
}
inline void SITLGps::set_time_usec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_usec(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.SITLGps.time_usec)
}

// optional uint64 time_utc_usec = 2;
inline bool SITLGps::_internal_has_time_utc_usec() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SITLGps::has_time_utc_usec() const {
  return _internal_has_time_utc_usec();
}
inline void SITLGps::clear_time_utc_usec() {
  time_utc_usec_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SITLGps::_internal_time_utc_usec() const {
  return time_utc_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SITLGps::time_utc_usec() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.SITLGps.time_utc_usec)
  return _internal_time_utc_usec();
}
inline void SITLGps::_internal_set_time_utc_usec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  time_utc_usec_ = value;
}
inline void SITLGps::set_time_utc_usec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_utc_usec(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.SITLGps.time_utc_usec)
}

// required double latitude_deg = 3;
inline bool SITLGps::_internal_has_latitude_deg() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SITLGps::has_latitude_deg() const {
  return _internal_has_latitude_deg();
}
inline void SITLGps::clear_latitude_deg() {
  latitude_deg_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SITLGps::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double SITLGps::latitude_deg() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.SITLGps.latitude_deg)
  return _internal_latitude_deg();
}
inline void SITLGps::_internal_set_latitude_deg(double value) {
  _has_bits_[0] |= 0x00000004u;
  latitude_deg_ = value;
}
inline void SITLGps::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.SITLGps.latitude_deg)
}

// required double longitude_deg = 4;
inline bool SITLGps::_internal_has_longitude_deg() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SITLGps::has_longitude_deg() const {
  return _internal_has_longitude_deg();
}
inline void SITLGps::clear_longitude_deg() {
  longitude_deg_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SITLGps::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double SITLGps::longitude_deg() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.SITLGps.longitude_deg)
  return _internal_longitude_deg();
}
inline void SITLGps::_internal_set_longitude_deg(double value) {
  _has_bits_[0] |= 0x00000008u;
  longitude_deg_ = value;
}
inline void SITLGps::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.SITLGps.longitude_deg)
}

// required double altitude = 5;
inline bool SITLGps::_internal_has_altitude() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SITLGps::has_altitude() const {
  return _internal_has_altitude();
}
inline void SITLGps::clear_altitude() {
  altitude_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SITLGps::_internal_altitude() const {
  return altitude_;
}
inline double SITLGps::altitude() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.SITLGps.altitude)
  return _internal_altitude();
}
inline void SITLGps::_internal_set_altitude(double value) {
  _has_bits_[0] |= 0x00000010u;
  altitude_ = value;
}
inline void SITLGps::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.SITLGps.altitude)
}

// optional double eph = 6;
inline bool SITLGps::_internal_has_eph() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SITLGps::has_eph() const {
  return _internal_has_eph();
}
inline void SITLGps::clear_eph() {
  eph_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double SITLGps::_internal_eph() const {
  return eph_;
}
inline double SITLGps::eph() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.SITLGps.eph)
  return _internal_eph();
}
inline void SITLGps::_internal_set_eph(double value) {
  _has_bits_[0] |= 0x00000020u;
  eph_ = value;
}
inline void SITLGps::set_eph(double value) {
  _internal_set_eph(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.SITLGps.eph)
}

// optional double epv = 7;
inline bool SITLGps::_internal_has_epv() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SITLGps::has_epv() const {
  return _internal_has_epv();
}
inline void SITLGps::clear_epv() {
  epv_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double SITLGps::_internal_epv() const {
  return epv_;
}
inline double SITLGps::epv() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.SITLGps.epv)
  return _internal_epv();
}
inline void SITLGps::_internal_set_epv(double value) {
  _has_bits_[0] |= 0x00000040u;
  epv_ = value;
}
inline void SITLGps::set_epv(double value) {
  _internal_set_epv(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.SITLGps.epv)
}

// optional double velocity = 8;
inline bool SITLGps::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SITLGps::has_velocity() const {
  return _internal_has_velocity();
}
inline void SITLGps::clear_velocity() {
  velocity_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double SITLGps::_internal_velocity() const {
  return velocity_;
}
inline double SITLGps::velocity() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.SITLGps.velocity)
  return _internal_velocity();
}
inline void SITLGps::_internal_set_velocity(double value) {
  _has_bits_[0] |= 0x00000080u;
  velocity_ = value;
}
inline void SITLGps::set_velocity(double value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.SITLGps.velocity)
}

// optional double velocity_east = 9;
inline bool SITLGps::_internal_has_velocity_east() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SITLGps::has_velocity_east() const {
  return _internal_has_velocity_east();
}
inline void SITLGps::clear_velocity_east() {
  velocity_east_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double SITLGps::_internal_velocity_east() const {
  return velocity_east_;
}
inline double SITLGps::velocity_east() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.SITLGps.velocity_east)
  return _internal_velocity_east();
}
inline void SITLGps::_internal_set_velocity_east(double value) {
  _has_bits_[0] |= 0x00000100u;
  velocity_east_ = value;
}
inline void SITLGps::set_velocity_east(double value) {
  _internal_set_velocity_east(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.SITLGps.velocity_east)
}

// optional double velocity_north = 10;
inline bool SITLGps::_internal_has_velocity_north() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SITLGps::has_velocity_north() const {
  return _internal_has_velocity_north();
}
inline void SITLGps::clear_velocity_north() {
  velocity_north_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double SITLGps::_internal_velocity_north() const {
  return velocity_north_;
}
inline double SITLGps::velocity_north() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.SITLGps.velocity_north)
  return _internal_velocity_north();
}
inline void SITLGps::_internal_set_velocity_north(double value) {
  _has_bits_[0] |= 0x00000200u;
  velocity_north_ = value;
}
inline void SITLGps::set_velocity_north(double value) {
  _internal_set_velocity_north(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.SITLGps.velocity_north)
}

// optional double velocity_up = 11;
inline bool SITLGps::_internal_has_velocity_up() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SITLGps::has_velocity_up() const {
  return _internal_has_velocity_up();
}
inline void SITLGps::clear_velocity_up() {
  velocity_up_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double SITLGps::_internal_velocity_up() const {
  return velocity_up_;
}
inline double SITLGps::velocity_up() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.SITLGps.velocity_up)
  return _internal_velocity_up();
}
inline void SITLGps::_internal_set_velocity_up(double value) {
  _has_bits_[0] |= 0x00000400u;
  velocity_up_ = value;
}
inline void SITLGps::set_velocity_up(double value) {
  _internal_set_velocity_up(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.SITLGps.velocity_up)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SITLGps_2eproto
